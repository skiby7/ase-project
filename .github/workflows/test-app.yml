name: Lint & Tests

on:
    push:
        branches: ["**"]
    pull_request:
        branches: ["**"]

permissions:
    contents: read

jobs:
    lint:
        runs-on: ubuntu-latest
        outputs:
            lint-success: ${{ steps.lint.outcome }}
        steps:
            - name: Check out the repository
              uses: actions/checkout@v4

            - name: Set up Python 3.12
              uses: actions/setup-python@v3
              with:
                  python-version: "3.12"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8

            - name: Lint with flake8
              id: lint
              run: |
                  # stop the build if there are Python syntax errors or undefined names
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                  # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    unit_test_services:
        runs-on: ubuntu-latest
        needs: lint
        strategy:
            matrix:
                service:
                    [
                        authentication_service,
                        gacha_service,
                        tux_service,
                        auction_service,
                    ]
        steps:
            - name: Check out the repository
              uses: actions/checkout@v4

            - name: Set up Docker
              uses: docker/setup-buildx-action@v2

            - name: Run tests
              run: |
                  (cd src/${{ matrix.service }} && ./run_tests.sh)

    integration_test:
        runs-on: ubuntu-latest
        needs: unit_test_services
        steps:
            - name: Check out the repository
              uses: actions/checkout@v4

            - name: Set up Docker
              uses: docker/setup-buildx-action@v2

            - name: Run tests
              run: |
                  (cd src/integration_tests && ./run_tests.sh)

    notify_success:
        runs-on: ubuntu-latest
        needs: integration_test
        if: success()
        steps:
            - name: Send Telegram Success Message
              run: |
                  curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
                  -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                  -d text="üéâ Build succeeded for \`ase-project\` on branch \`${{ github.ref_name }}\`\\!" \
                  -d parse_mode="Markdownv2" \
                  -d disable_notification=true

    notify_failure:
        runs-on: ubuntu-latest
        needs: integration_test
        if: failure()
        steps:
            - name: Send Telegram Error Message
              run: |
                  curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
                  -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                  -d text="‚ùå Build failed for \`ase-project\` on branch \`${{ github.ref_name }}\`\\." \
                  -d parse_mode="Markdownv2" \
                  -d disable_notification=true
