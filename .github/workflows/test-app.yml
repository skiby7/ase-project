# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Lint & Tests

on:
    push:
        branches: ["**"]
    pull_request:
        branches: ["**"]

permissions:
    contents: read

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
            - name: Set up Python 3.12
              uses: actions/setup-python@v3
              with:
                  python-version: "3.12"
            - name: Set up Docker
              uses: docker/setup-buildx-action@v2
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8
            - name: Lint with flake8
              run: |
                  # stop the build if there are Python syntax errors or undefined names
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                  # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

            # - name: Test auction service
            #   run: |
            #       PYTHONPATH=src/auction_service:src/auction_service/service pytest src/auction_service

            # - name: Test authentication service
            #   run: |
            #       PYTHONPATH=src/authentication_service:src/authentication_service/service pytest src/authentication_service

            # - name: Test gacha roll service
            #   run: |
            #       PYTHONPATH=src/gacha_service:src/gacha_service/service pytest src/gacha_service

            - name: Test auth service
              run: |
                  (cd src/authentication_service && ./run_tests.sh)

            - name: Test distro service
              run: |
                  (cd src/gacha_service && (./run_tests.sh || true))

            - name: Test tux service
              run: |
                  (cd src/tux_service && ./run_tests.sh)

            - name: Send Telegram Success Message
              if: success()
              run: |
                  curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
                  -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                  -d text="üéâ Build succeeded for \`ase-project\` on branch \`${{ github.ref_name }}\`\\!" \
                  -d parse_mode="Markdownv2" \
                  -d disable_notification=true

            - name: Send Telegram Error Message
              if: failure()
              run: |
                  curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
                  -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
                  -d text="‚ùå Build failed for \`ase-project\` on branch \`${{ github.ref_name }}\`." \
                  -d parse_mode="Markdownv2" \
                  -d disable_notification=true
